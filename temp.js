var toShortString = require('to-short-string');
var util = require('util');
var util_inspect = util.inspect;
var stackTrace = require('stack-trace');
var path = require('path');
var onFinished = require('on-finished');
var fs = require('fs');
var DEFAULT_WIDTH = (112+35-35);
// var IGNORE = [];
// var IGNORE = ['log', 'verbose'];
var IGNORE = (process.env.CLOG && process.env.CLOG.split(' ')) || [];
var COLOR = false;
var NOBULLET = process.env.UNCLOG_NOBULLET;
var NOTIME = process.env.UNCLOG_NOTIME;
var NOPADDING = process.env.UNCLOG_NOPADDING;
var TWOLINE = process.env.UNCLOG_TWOLINE;
var NOLONGSTACKTRACE = process.env.UNCLOG_NOLONGSTACKTRACE;
var SYMBOL = process.env.UNCLOG_PADDING_SYMBOL;
var backtrace = false;
var ignore = [
var utils = {
var i = 0;
var unclog = Object.create(this);
// var context = getBaseFilename();
var method = req.method.toUpperCase();
var url = req.url;
var ip = (req.headers['x-forwarded-for'] || req.ip || req._remoteAddress || (req.connection && req.connection.remoteAddress));
var useragent = '(' + require('ua-parser').parse(req.headers['user-agent']).ua.toString() + ')';
var status = '[' + (res._header ? (res.statusCode || '...') : 'timeout') + ']';
var logTimeout = setTimeout(log, 30000);
var socketRouter = require('socket.io-events')();
for (var stacktrace = stackTrace.parse(new Error()), i = 0; i < stacktrace.length; i++)
//     var stacktrace = stackTrace.parse(new Error());
//         var filename = stacktrace[7];
//         var filename = stacktrace[3];
//         var filename = stacktrace[4];
var color = {};
var bullet1 = {}, bullet2 = {}, bullet3 = {};
for(var k in str)
var message = util.format.apply(null, str).split('\n');
// var message = util.format.apply(null, str).split('/[\n\r]+/');
var message_post = '';
var stacktrace = stackTrace.parse(new Error())
var filename = stacktrace[2].fileName;
var filename = stacktrace[3].fileName;
// var context = path.basename(filename, path.extname(path.basename(filename)));
var context = getBaseFilename();
var padding = {
var time = new Date();
// var conwidth = process.stdout.columns > DEFAULT_WIDTH ? process.stdout.columns : DEFAULT_WIDTH;
var conwidth = DEFAULT_WIDTH;
var leveldiff = 7 - level.length;
var contextdiff = context.length - BASE.context.length;
for (var i = 0; i < message.length; i++) {
for (var j = 0; j < leveldiff; j++)
// var stacktrace = stackTrace.parse(new Error(message[i]))[2];
var stacktrace = '';
var stacktraces = stackTrace.parse(new Error(message[i]));
//     for (var j = 2; j < (NOLONGSTACKTRACE ? 7 : stacktraces.length); j++)
//     for (var j = 0; j < stacktraces.length; j++)
//             var stacktrace_tobe = ' [' + path.dirname(stacktraces[j].fileName).split(path.sep).reverse()[0] + path.sep + path.basename(stacktraces[j].fileName) + ':' + stacktraces[j].lineNumber + ']';
// for (var j = 2; j < (NOLONGSTACKTRACE ? 7 : stacktraces.length); j++)
for (var j = 2; j < (NOLONGSTACKTRACE ? 7 : stacktraces.length); j++)
//     var err = new Error(message, context, level);